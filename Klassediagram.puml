@startuml

package Controller{
    class BaseController {
        UI ui
        MainController ctrl
        UserHandler userHandler

        +login(): void
        +logout(): void
        -exitApplication(): void
    }

    abstract class MainController{
        +{abstract} void showMenu()
        #UI ui
        #UserHandler userHandler
        #MemberHandler memberHandler
        #MembershipHandler membershipHandler
        #PaymentHandler paymentHandler
        #CompetitionHandler competitionHandler
        #ResultHandler resultHandler
        #TeamHandler teamHandler

        +showTop(String filter): void
        +showMissingPayments(): void
        +showContingents(): void
        +addResult(): void
        +refreshData(): void
    }

    class AdminController {
        BaseController base

        +showMenu(): void
        -registerNewMember(): void
        -changeMember(): void
        -deleteMember(): void
    }

    class ModeratorController {
        BaseController base

        +showMenu(): void
    }

    class UserController {
        BaseController base

        +showMenu(): void
    }

    BaseController <..> MainController : Use
    class AdminController extends MainController
    class ModeratorController extends MainController
    class UserController extends MainController

}

package Data{
    package Handler{
        class CompetitionHandler{
        #CompetitionMapper competitionMapper : final
        #ArrayList<Competition> competition
        --
        +getCompetition : ArrayList<Competition>
        +updateCompetitions() : void
        +getCompetitionById(int id) : Competition
        }

        class MemberHandler{
        #MemberMapper memberMapper : final
        #ArrayList<Membership> membership
        #ArrayList<Member> members
        #ArrayList<Result> results
        --
        +Member getMemberById(int id)
        +updateMembers(ArrayList<Membership> memberships) : void
        +setMemberships(ArrayList<Membership> memberships) : void
        +getMembers() : ArrayList<Member>
        +setMembers(ArrayList<Member> members) : void
        +addMember(Member member) : boolean
        +getResults() : ArrayList<Result>
        +setResults(ArrayList<Result> results) : void
        +updateMember(Member member) : void
        +deleteMember(int id) : boolean
        +registerMember(String name, String birthday, String email, int phone, int membership) : int
        +showTopSwimmers(String filter) : String
        +getTopSwimmers(String filter) : HashMap<Result,Member>
        }

        class MembershipHandler{
        #MembershipMapper memberMapper : final
        #ArrayList<Membership> memberships
        --
        +getMemberships() : ArrayList<Membership>
        +setMemberships(ArrayList<Membership> memberships) : void
        +updateMemberships() : void
        +showMemberships() : String
        }

        class PaymentHandler{
        #PaymentMapper paymentMapper : final
        #ArrayList<Member> members
        #ArrayList<Payment> payments
        --
        +getMembers() : ArrayList<Member>
        +setMembers(ArrayList<Member> members) : void
        +getPayments() : ArrayList<Payment>
        +updatePayments(ArrayList<Member> members) : void
        +setPayments(ArrayList<Payment> payments) : void
        +showMissingPayments() : String
        }

        class ResultHandler{
        #ResultMapper resultMapper : final
        #ArrayList<Result> results
        --
        +ArrayList<Result> getResults()
        +void setResults(ArrayList<Result> results)
        +Result addResult(Result result)
        +updateResults(ArrayList<Member> members, ArrayList<Competition> competitions) : void
        +registerResult(Member member, int diciplin,Competition competition, double resultTime, String training) : Result
        }
        class TeamHandler{
        #TeamMapper teamMapper : final
        #ArrayList<Team> teams
        --
        +ArrayList<Team> getTeams()
        +setTeams(ArrayList<Team> teams) : void
        +updateResults(ArrayList<Member> members, ArrayList<User> users) : void
        }

        class UserHandler{
        #ArrayList<User> users;
         UI ui = new UI();
         UserMapper userMapper
         --
         +checkLogin() : User
         +updateUsers() : void
         +getUsers() : ArrayList<User>
        }
    }

    package Mapper{
        class CompetitionMapper{
        +ArrayList<Competition> getCompetition()
        +Competition addNewCompetition(String name, String location, LocalDateTime datetime)
        }

        class MemberMapper{
        +ArrayList<Member> getAllMembers(ArrayList<Membership> membership)
        +int[] getTopFive(String filter)
        +Member createMember(String name, LocalDate birthday, String email, int phone, Membership membership)
        +Member editMember(Member member)
        +boolean deleteMember(int id)

        }

        class MembershipMapper{
        +ArrayList<Membership> getMembership() : tmpMemberships

        }

        class PaymentMapper{
        +ArrayList<Payment> getAllPayments(ArrayList<Member> members) : tmpPayments
        +String getMissingPayments() : str.toString()
        +Payment createNewPayment(Member member, double paid) : null
        }

        class ResultMapper{
        +ArrayList<Result> getResults(ArrayList<Member> members, ArrayList<Competition> competition)
        +Result addNewResult(Member member, String diciplin, Competition competition, Double ResultMeters, double resultTime, boolean training)


        }

        class TeamMapper{
        +ArrayList<Team> getTeams(ArrayList<Member> members, ArrayList<User> users)

        }

        class UserMapper{
        Connection connection
        --
        +ArrayList<User> getUsers()
        +User checkLogin(String username, String password)
        }
    }
}

package Model {

    class Competition{
        -id: int
        -name: String
        -location: String
        -timestamp: LocalDateTime

        +getId():int
        +getName(): String
        +getLocation(): String
        +getTimestamp(): LocalDateTime
        +setName(): void
        +toString(): String

    }

    class Member{
        -id: int
        -name: String
        -birthday: LocalDate
        -email: String
        -phone: int
        -membership: Membership

        +getMemberById(int id, ArrayList<Member> list): Member
        +calculateAge(): int
        +getId(): int
        +getName(): String
        +getBirthday(): LocalDate
        +getEmail(): String
        +getPhone(): int
        +getMembership(): Membership
        +setEmail(String email): void
        +setPhone(int phone): void
        +setMembership(Membership membership): void
        +toString(): String
    }

    class Membership{
        -id: int
        -name: String
        -price: double

        +getId(): int
        +getName(): String
        +getPrice(): double
        +setId(int id): void
        +toString(): String
    }

    class Payment{
        -id: int
        -member: Member
        -paid: double
        -timestamp: LocalDateTime

        +getId(): int
        +getMember(): Member
        +setId(int id): void
        +setMember(Member member): void
        +toString(): String

    }

    class Result{
        -id: int
        -member: Member
        -diciplin: String
        -competition: Competition
        -resultMeters: double
        -resultTime: double
        -training: boolean

        +getId(): int
        +getMember(): Member
        +setMember(Member member): void
        +toString(): String
    }

    class Team{
        -id: int
        -name: String
        -coach: User
        -teamMembers: ArrayList<Member>

        +toString(): String
    }

    class User{
        -id: int
        -username: String
        -password: String
        -name: String
        -userPermissions: int

        +getUserPermissions(): int
        +getName(): String
        +getId(): int
        +toString(): String
    }

}

package Util{
    class DBConnector{

        -Connection connection;
        -{static}DBConnector instance;
        -String serverIP
        -String serverPort
        -String serverUsr
        -String serverPsw
        -String serverDb

        -DBConnector()
        +{static}getInstance(): DBConnector
        +getConnection(): Connection
    }
}

package View{
    interface UIInterface{
        void printMessage(String str)
        void printMenu(String menuStr)
        String getStrInput()
        int getIntInput()
        double getDoubleInput()
    }

    class UI {
        -Scanner input
        +printMessage(String str)
        +printMenu(String menuStr)
        +getStrInput(): String
        +getIntInput(): int
        +getDoubleInput(): double

    }

    class UI implements UIInterface

}
note top of DBConnector : MySQL
DBConnector .. UserHandler : use
BaseController *-- UserHandler
UI --> MainController
User *--* MainController
Member *--* MemberHandler
Result --* Competition
Result --* Member
Payment --* Member
Membership --* Member
Member --* Team
CompetitionMapper --> CompetitionHandler
MemberMapper --> MemberHandler
MembershipMapper --> MembershipHandler
PaymentMapper --> PaymentHandler
ResultMapper --> ResultHandler
TeamMapper --> TeamHandler
UserMapper --> UserHandler

MemberMapper ..> DBConnector : Use




@enduml