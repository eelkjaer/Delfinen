@startuml

package Controller{
    class BaseController {
        UI ui
        MainController ctrl
        UserHandler userHandler

        +login(): void
        +logout(): void
        -exitApplication(): void
    }

    abstract class MainController{
        +{abstract} void showMenu()
        #UI ui
        #UserHandler userHandler
        #MemberHandler memberHandler
        #MembershipHandler membershipHandler
        #PaymentHandler paymentHandler
        #CompetitionHandler competitionHandler
        #ResultHandler resultHandler
        #TeamHandler teamHandler

        +showTop(String filter): void
        +showMissingPayments(): void
        +showContingents(): void
        +addResult(): void
        +refreshData(): void
    }

    class AdminController {
        BaseController base

        +showMenu(): void
        -registerNewMember(): void
        -changeMember(): void
        -deleteMember(): void
    }

    class ModeratorController {
        BaseController base

        +showMenu(): void
    }

    class UserController {
        BaseController base

        +showMenu(): void
    }

    BaseController <..> MainController : Use
    class AdminController extends MainController
    class ModeratorController extends MainController
    class UserController extends MainController

}

package Data{
    package Handler{
        class CompetitionHandler{
            -competitionMapper: CompetitionMapper
            -competitions: ArrayList<Competition>

            +getCompetitions(): ArrayList<Competition>
            +updateCompetitions(): void
            +getCompetitionById(int id): Competition
        }

        class MemberHandler{
            -memberMapper: MemberMapper
            -memberships: ArrayList<Membership>
            -members: ArrayList<Member>
            -results: ArrayList<Result>

            +getMemberById(int id): Member
            +getMembers(): ArrayList<Member>
            +getResults(): ArrayList<Result>
            +setMemberships(ArrayList<Membership> memberships): void
            +setMembers(ArrayList<Member> members): void
            +setResults(ArrayList<Result> results): void
            +addMember(Member member): boolean
            +updateMembers(ArrayList<Membership> memberships): void
            +updateMember(Member member): void
            +deleteMember(int id): boolean
            +registerMember(String name, String birthday, String email, int phone, int membership): int
            +showTopSwimmers(String filter): String
            -getTopSwimmers(String filter): HashMap<Result,Member>
        }

        class MembershipHandler{
            -memberMapper: MemberMapper
            -memberships: ArrayList<Membership>

            +getMemberships(): ArrayList<Membership>
            +setMemberships(ArrayList<Membership> memberships): void
            +updateMemberships(): void
            +showMemberships(): String
        }

        class PaymentHandler{
            -paymentMapper: PaymentMapper
            -members: ArrayList<Member>
            -payments: ArrayList<Payment>

            +getMembers(): ArrayList<Member>
            +getPayments(): ArrayList<Payment>
            +setMembers(ArrayList<Member> members): void
            +setPayments(ArrayList<Payment> payments): void
            +updatePayments(ArrayList<Member> members):void
            +showMissingPayments(): String
        }

        class ResultHandler{
            -resultMapper = ResultMapper
            -results: ArrayList<Result>

            +getResults(): ArrayList<Result>
            +setResults(ArrayList<Result> results): void
            +addResult(Result result): Result
            +updateResults(ArrayList<Member> members, ArrayList<Competition> competitions): void
            +registerResult(Member member, int diciplin,Competition competition, double resultTime, String training): Result
        }

        class TeamHandler{
            -teamMapper: TeamMapper
            -teams: ArrayList<Team>

            +getTeams(): ArrayList<Team>
            +setTeams(ArrayList<Team> teams): void
            +updateResults(ArrayList<Member> members, ArrayList<User> users): void
        }

        class UserHandler{
            -users: ArrayList<User>
            -ui: UI
            -userMapper: UserMapper

            +getUsers(): ArrayList<User>
            +checkLogin(): User
            +updateUsers(): void
        }
    }

    package Mapper{
        class CompetitionMapper{
            +getCompetitions(): ArrayList<Competition>
            +addNewCompetition(String name, String location, LocalDateTime datetime): Competition
        }

        class MemberMapper{
            +getAllMembers(ArrayList<Membership> memberships): ArrayList<Member>
            +getTopFive(String filter): int[]
            +createNewMember(String name, LocalDate birthday, String email, int phone, Membership membership): Member
            +editMember(Member member): Member
            +deleteMember(int id): boolean
        }

        class MembershipMapper{
            +getMemberships(): ArrayList<Membership>
        }

        class PaymentMapper{
            +getAllPayments(ArrayList<Member> members): ArrayList<Payment>
            +getMissingPayments(): String
            +createNewPayment(Member member, double paid): Payment
        }

        class ResultMapper{
            +getResults(ArrayList<Member> members, ArrayList<Competition> competitions): ArrayList<Result>
            +addNewResult(Member member, String diciplin, Competition competition, Double resultMeters, double resultTime, boolean training): Result
        }

        class TeamMapper{
            +getTeams(ArrayList<Member> members, ArrayList<User> users): ArrayList<Team>
        }

        class UserMapper{
            -connection: Connection

            +getUsers(): ArrayList<User>
            +checkLogin(String username, String password): User
        }
    }
}

package Model {
    class Competition{
        -id: int
        -name: String
        -location: String
        -timestamp: LocalDateTime

        +getId():int
        +getName(): String
        +getLocation(): String
        +getTimestamp(): LocalDateTime
        +setName(): void
        +toString(): String

    }

    class Member{
        -id: int
        -name: String
        -birthday: LocalDate
        -email: String
        -phone: int
        -membership: Membership

        +getMemberById(int id, ArrayList<Member> list): Member
        +calculateAge(): int
        +getId(): int
        +getName(): String
        +getBirthday(): LocalDate
        +getEmail(): String
        +getPhone(): int
        +getMembership(): Membership
        +setEmail(String email): void
        +setPhone(int phone): void
        +setMembership(Membership membership): void
        +toString(): String
    }

    class Membership{
        -id: int
        -name: String
        -price: double

        +getId(): int
        +getName(): String
        +getPrice(): double
        +setId(int id): void
        +toString(): String
    }

    class Payment{
        -id: int
        -member: Member
        -paid: double
        -timestamp: LocalDateTime

        +getId(): int
        +getMember(): Member
        +setId(int id): void
        +setMember(Member member): void
        +toString(): String

    }

    class Result{
        -id: int
        -member: Member
        -diciplin: String
        -competition: Competition
        -resultMeters: double
        -resultTime: double
        -training: boolean

        +getId(): int
        +getMember(): Member
        +setMember(Member member): void
        +toString(): String
    }

    class Team{
        -id: int
        -name: String
        -coach: User
        -teamMembers: ArrayList<Member>

        +toString(): String
    }

    class User{
        -id: int
        -username: String
        -password: String
        -name: String
        -userPermissions: int

        +getUserPermissions(): int
        +getName(): String
        +getId(): int
        +toString(): String
    }

}

package Util{
    class DBConnector{
        -Connection connection;
        -{static}DBConnector instance;
        -String serverIP
        -String serverPort
        -String serverUsr
        -String serverPsw
        -String serverDb

        -DBConnector()
        +{static}getInstance(): DBConnector
        +getConnection(): Connection
    }
}

package View{
    interface UIInterface{
        void printMessage(String str)
        void printMenu(String menuStr)
        String getStrInput()
        int getIntInput()
        double getDoubleInput()
    }

    class UI {
        -Scanner input
        +printMessage(String str)
        +printMenu(String menuStr)
        +getStrInput(): String
        +getIntInput(): int
        +getDoubleInput(): double

    }

    class UI implements UIInterface

}

@enduml